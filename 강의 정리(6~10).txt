6. 몬스터 만들기
- enemy와 player가 충돌하면 물리적인 힘에 의해 enemy에 velocity가 생긴다. 이를 없애기 위해 Vector2.zero로 velocity를 0으로 만든다.
- reposition 스크립트를 enemy에도 적용하여 Area를 벗어나면 Player가 가는 방향에서 나타나도록 한다.

7. 오브젝트 풀링으로 소환하기
- object를 드래그 드랍하여 prefab으로 변환
- prefab을 변경하면 scene에 배치된 object도 자동 적용
- Instantiate + Destroy 함수를 자주 사용하면 메모리 문제 발생 => 오브젝트 풀링으로 해결
  - 스크립트에 프리팹들을 보관할 변수, 풀 담당을 하는 리스트들 필요
  - 선택한 풀의 놀고 있는(= 비활성화) 게임 오브젝트 접근
  - 발견하면 해당 게임 오브젝트 return
  - 발견하지 못하면 새롭게 생성하여 return
- Instantiate: 원본 오브젝트를 복제하여 장면에 생성하는 함수
- OnEnable: 스크립트가 활성화될 때 호출되는 이벤트 함수
- GetComponentsInChildren<Transform>을 하면 자기 자신의 Transform도 포함되니 주의해야 한다.

8. 소환 레벨 적용하기
- 하나의 스크립트 내에서 2개의 클래스 선언이 가능하다.
- 직렬화(Serialization): 객체를 저장 혹은 전송하기 위해 변환 => 인스펙터에서 초기화가 가능해짐

9. 회전하는 근접무기 구현
- <Transform>.parent를 통해 부모 변경 가능
- rotate의 초기값: Quaternion.identity

10. 자동 원거리 공격 구현
- Layer: 물리, 시스템 상으로 구분짓기 위한 요소
- Physics2D.CircleCastAll(캐스팅 시작 위치, 원의 반지름, 캐스팅 방향, 캐스팅 길이, 대상 레이어)
- Quaternion.FromToRotation: 지정된 축을 중심으로 목표를 향해 회전하는 함수
