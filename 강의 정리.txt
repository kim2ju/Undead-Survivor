1. 2D 오브젝트 만들기
- Sprites
  - Sprite Mode => Multiple
  - Pixels Per Unit: 하나의 네모칸에 몇 pixel이 들어갈지 => 주 캐릭터의 실제 크기로 설정
  - Filter Mode => Point(필터 X)
  - Comporession: 픽셀 게임에서는 압축 불필요 => None
  - Slice할 때는 Grid By Cell size로 정확하게
  - Apply할 때 각 Sprite의 이름을 지정해서 알기 쉽게 하자

- 유니티 => 컴포넌트 기반 엔진 = 게임 객체를 컴포넌트로 구성
- Sprite Renderer: 게임상에 스프라이트를 그리는 컴포넌트
- Rigidbody: 물리 영향을 받는 컴포넌트(ex. 중력, 충돌 속력)
- Collider: 물리적인 충돌 면을 결정하는 컴포넌트

2. 플레이어 이동 구현하기
- MonoBehaviour: 게임 로직 구성에 필요한 것들을 가진 클래스
- Update: 하나의 프레임마다 한 번씩 호출되는 생명주기 함수
- Awake: 시작할 때 한 번만 실행되는 생명주기 함수
- FixedUpdate: 물리 연산 프레임마다 호출되는 생명주기 함수
- inputVec 값에 따라 움직이게 하는 방법:
  - 1. 힘을 준다: rigid.AddForce(inputVec);
  - 2. 속도 제어: rigid.velocity = inputVec;
  - 3. 위치 이동: rigid.MovePosition(rigid.position + inputVec);
- normalized: 벡터 값의 크기가 1이 되도록 좌표가 수정된 값(대각선 이동: 루트2 -> 1로 변경)
- fixedDeltaTime: 물리 프레임 하나가 소비한 시간
- Input.GetAxis는 -1 ~ 1의 값을 가지고 Input.GetAxisRaw는 -1, 0, 1의 값을 가진다.

3. 새로운 인풋시스템 적용하기
- Window -> Package Manager -> Packages: Unity Registry -> Input System install
- Player 객체에서 Player Input 컴포넌트 추가 후 input action 생성
  - Action Type: 버튼 클릭인지, 값을 내보내는 것인지 구분
  - Control Type: 값의 형식을 결정
  - Interactions: 인풋의 호출 타이밍 지정
  - Processors: 인풋의 값을 후보정(ex. Normalize)

4. 2D 셀 애니메이션 제작하기
- LateUpdate: 프레임이 종료되기 전 실행되는 생명주기 함수
- 셀 애니메이션: 여러 장의 이미지를 순차적으로 보여주는 방식
- Animator: 애니메이션을 상태로 관리하는 컴포넌트(애니메이션 생성 시 자동으로 생성)
  - 노란색 상태: 게임 실행 시 가장 먼저 실행되는 상태
  - Duration: 부드럽게 전환하는 역할: 셀 애니메이션에서는 최소화
  - 즉시 상태 변경을 위해 Has Exit Time 체크 해제
  - 반복할 필요가 없다면 애니메이션 에셋의 Loop Time 체크 해제
- Animator Override Controller: 애니메이션만 덮어 씌우는 에셋 (Animator 복사해서 사용하는 느낌)

5. 무한 맵 이동
 - Window -> 2D -> Tile Palette, Create -> 2D -> Tiles -> Rule Tile
  - Rule Tile: 인접한 타일에 따라 이미지가 정해지는 타일
  - Tiling Rules의 Output을 Random으로 할 수 있다.
  - Tiling Rules의 Noise를 조절하여 원하는 형태의 타일맵을 제작할 수 있다.
  - 이렇게 만든 Rule Tile을 Tile Palette에 적용
- Hierarchy -> 2D object -> TileMap -> Rectangular
- Composite Collider 2D: 타일마다 나눠진 형태를 하나로 합치는 컴포넌트
- Tilemap Collider 2D => Used By Composite
- Player와 Tile이 충돌하지 않도록 Composite Collider에서 Is Trigger 체크
- 자동으로 생성되는 Rigidbody에서는 type을 static으로 변경
- Game Manager 스크립트를 통해 Player의 정보를 Reposition에 전달
- static: 정적으로 사용하겠다는 키워드. 바로 메모리에 얹어버림. Inspector에 나타나지 않는다.
- Mathf.Abs: 절댓값 함수
- Translate: 지정된 값만큼 현재 위치에서 이동
- Pixel perfect Camera: 픽셀 깨지는 걸 막는 컴포넌트
  - Pixel Per Unit: 스프라이트에서 사용하는 수치와 맞추기
  - Game 화면에 오류가 뜨면 Game 창 크기 짝수로 조절
  - Reference Resolution: 카메라 크기 계산을 위한 참고 해상도
  - Tilemap 크기, Area 크기, 재배치 거리는 카메라 크기와 비슷하게
- Package Manager -> Chinemachine 설치: 카메라 조절
  - Virtual Camera: Main Camera의 카메라 감독 역할
  - Follow => Player: 카메라가 Player를 따라 이동
  - Update Method => Fixed Update로 수정
- Tilemap의 Order in Layer 낮추면 캐릭터 그림자 잘 보임

